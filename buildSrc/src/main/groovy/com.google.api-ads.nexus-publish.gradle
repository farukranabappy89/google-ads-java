/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Defines a plugin which will automatically configure gradle publish.
 *
 * <p/>
 *
 * Test this class by setting a non-snapshot version in gradle.properties.
 * Nexus rejects snapshot artifacts with HTTP 400 (and little else).
 */

plugins {
    id 'maven-publish'
}

import java.nio.charset.StandardCharsets

import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpHeaders
import com.google.api.client.http.HttpRequest
import com.google.api.client.http.HttpRequestInitializer
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.http.xml.XmlHttpContent
import com.google.api.client.util.Key
import com.google.api.client.xml.XmlNamespaceDictionary
import com.google.api.client.xml.XmlObjectParser

/** Defines data binding class for sending HTTP basic auth headers. */
class AuthHeaders extends HttpHeaders {
    @Key("Authorization")
    public String authorization

    AuthHeaders(String user, String password) {
        // Generates the base 64 encoded version of user:pass which is specified
        // in headers.
        def encodedCredential = Base64.encoder.encode("${user}:${password}".bytes)
        this.authorization = "Basic " +
                new String(encodedCredential, StandardCharsets.UTF_8)
    }
}

/**
 * Defines data binding class for Nexus POST request to create staging repo.
 *
 * <p/>
 *
 * Serializes as XML and will look like the following:
 *
 * <pre>
 *     <promoteRequest>
 *         <data>
 *             <description>some description here</description>
 *         </data>
 *     </promoteRequest>
 * </pre>
 */
class PromoteRequest {
    @Key
    public PromoteRequestData data

    PromoteRequest() {}

    PromoteRequest(String description) {
        data = new PromoteRequestData(description)
    }

    static class PromoteRequestData {
        /** Appears next to the staging repo in the Nexus UI. */
        @Key
        public String description

        /** Returned by Nexus. This is the newly created repository ID. */
        @Key
        public String stagedRepositoryId

        PromoteRequestData() {}

        PromoteRequestData(String description) {
            this.description = description
        }
    }
}


// Global variables for the created repository URL are stored in the root
// project. It isn't declared in SonatypeClient, since Gradle may reuse the
// VM instance (and its classloader) and so would reuse the previous
// staging repository ID.
project.rootProject.ext.NEXUS_CLIENT_LOCK = new Object();
project.rootProject.ext.STAGING_REPO_URL = null

/** Defines a class which implements a client for Sonatype Nexus. */
class SonatypeClient {

    private static final logger = org.slf4j.LoggerFactory.getLogger(SonatypeClient.class)
    private static final AUTO_STAGING_URL = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
    private static final DEPLOY_BY_REPO_URL_STEM = "https://oss.sonatype.org/service/local/staging/deployByRepositoryId/"
    private static final STAGING_START_URL = "https://oss.sonatype.org/service/local/staging/profiles/171a30b2ab63be/start"
    private final project

    SonatypeClient(project) {
        this.project = project
    }

    /**
     * Provides the Sonatype repository URL to use for deploying releases.
     *
     * <p/>
     *
     * Attempts to create a named staging repository to avoid using Nexus
     * auto-staging if possible. Based on the observation that auto-staging's
     * heuristic for which artifacts belong in the same repository is often
     * confused by Gradle's publish mechanism, which appears to create a new TCP
     * connection for each artifact.
     */
    def createSonatypeRepositoryUrl() {
        // Avoids creating the staging repository more than once.
        try {
            // Guards the creation of a staging repo on the release property.
            if (project.properties.containsKey("release")) {
                // Implements double checked locking to initialize STAGING_REPO_URL.
                // Initializes the URL on the first execution.
                if (project.rootProject.ext.STAGING_REPO_URL == null) {
                    synchronized (project.rootProject.ext.NEXUS_CLIENT_LOCK) {
                        return project.rootProject.ext.STAGING_REPO_URL = createStagingRepository()
                    }
                } else {
                    // On subsequent executions we can use the initialized URL.
                    return project.rootProject.ext.STAGING_REPO_URL
                }
            }
        } catch (Exception ex) {
            logger.warn("Failed to create new staging repo, falling back to auto-staging")
            return AUTO_STAGING_URL
        }
    }

    /** Creates a staging repository on Sonatype. */
    private def createStagingRepository() {
        // Implements the REST call to create a staging repository.
        // See https://support.sonatype.com/hc/en-us/articles/213465868-Uploading-to-a-Staging-Repository-via-REST-API
        // Note that there are two versions of Nexus v2 and v3 and the OSS instance
        // uses v2.
        // The Nexus docs are here: https://help.sonatype.com/repomanager2
        // The REST docs are here: https://repository.sonatype.org/nexus-restlet1x-plugin/default/docs/index.html
        // Warning: the docs are very patchy!

        // Configures Google HTTP client.
        // Logging of raw HTTP is handled by the client. Enable it by setting
        //   -Djava.util.logging.config.file=$(readlink -f logging.properties)
        // Create logging.properties with the contents:
        //   handlers=java.util.logging.ConsoleHandler
        //   java.util.logging.ConsoleHandler.level=ALL
        //   com.google.api.client.http.level=ALL
        def namespaceDictionary = new XmlNamespaceDictionary().set("", "")
        def requestFactory = new NetHttpTransport()
                .createRequestFactory(new HttpRequestInitializer() {
                    @Override
                    void initialize(HttpRequest request) throws IOException {
                        request.setParser(new XmlObjectParser(namespaceDictionary))
                    }
                })
        def authHeaders = new AuthHeaders(
                project.properties.get("sonatypeUser"),
                project.properties.get("sonatypePassword"))
        // Uses the Staging Profile on Nexus that Sonatype folks created.
        // Hard-codes the ID since there is only one. Retrieve this with:
        // curl -X GET \
        //   --header 'Authorization: Basic <base64 encoded user:pass>' \
        //   'https://oss.sonatype.org/service/local/staging/profiles'
        // Needs to be updated if we move to a new Nexus instance.
        def startStagingUrl = new GenericUrl(STAGING_START_URL)
        // Creates and executes a request to add a new staging repository.
        def content = new XmlHttpContent(
                namespaceDictionary,
                "promoteRequest",
                new PromoteRequest(
                        "Release of Google Ads API v${project.version} " +
                                "on ${InetAddress.getLocalHost().getCanonicalHostName()} " +
                                "${new Date()}"))
        logger.info("Creating staging repository")
        def response = requestFactory
                .buildPostRequest(startStagingUrl, content)
                .setHeaders(authHeaders)
                .execute()
        // Checks the response and returns the repository URL, falling back to
        // auto-staging if something went wrong.
        if (response.getStatusCode() == 201) { // HTTP 201 = Created
            def parsed = response.parseAs(PromoteRequest.class)
            logger.info("Staging repository created with ID ${parsed.data.stagedRepositoryId}")
            return DEPLOY_BY_REPO_URL_STEM + parsed.data.stagedRepositoryId
        } else {
            logger.info("Unable to create staging repository, falling back to auto-staging")
            return AUTO_STAGING_URL
        }
    }
}

// Configures gradle's native publishing now that debacle is done.
publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            url new SonatypeClient(project).createSonatypeRepositoryUrl()
            name = "sonatype"
            credentials {
                // Avoids storing Sonatype credentials in plain-text. Specify these on
                // the command line: -PsonatypeUser=foo
                username project.properties.get("sonatypeUser")
                password project.properties.get("sonatypePassword")
            }
        }
    }
}